#!/usr/bin/env node
var fs = require('fs')
var semver = require('semver')
var validateNpmPackageName = require('validate-npm-package-name')
var spdxExpressionValidate = require('spdx-expression-validate')

var haveError = false
var csv = fs.readFileSync('index.csv', 'utf8')
var data = csv
  .split('\n')
  .filter(Boolean)
  .map(function (line) {
    var split = line
      .split(',')
      .map(function (element) {
        return element.trim()
      })
    var object = {
      name: split[0],
      license: split[1],
      versions: split.slice(2)
    }
    if (!validateNpmPackageName(object.name).validForOldPackages) {
      haveError = true
      console.error(object.name + ' is not a valid package name.')
    }
    object.versions.forEach(function (version) {
      if (!semver.valid(version)) {
        haveError = true
        console.error(version + ' is not a valid version.')
      }
    })
    if (!spdxExpressionValidate(object.license)) {
      haveError = true
      console.error(object.license + ' is not a valid SPDX expression.')
    }
    return object
  })

if (haveError) process.exit(1)

var json = JSON.stringify(
  data.reduce(function (data, object) {
    return data.concat(
      object.versions.map(function (version) {
        return {
          name: object.name,
          version,
          license: object.license
        }
      })
    )
  }, []),
  null, 2
)
fs.writeFileSync('index.json', json + '\n')
